1.	Remove nth node from the end of linked list

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        if head.next is None:
            return None
        p0 = None
        p1 = head
        p2 = head
        for _ in range(n):
            p2 = p2.next
        while p2:
            p0 = p1
            p1 = p1.next
            p2 = p2.next
        if p0 is None:
            head = p1.next
        else:
            p0.next = p1.next
        return head

===============================================================================
2.	Reverse a linked list:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None:
            return head
        p0 = None
        p1 = head
        p2 = p1.next
        
        while p1:
            p1.next = p0
            p0 = p1
            p1 = p2
            if p2 is not None:
                p2 = p2.next
        head = p0
        return head

======================================================================================================
3.	Remove Linked List element
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        dummy_head = ListNode(-1)
        dummy_head.next = head
        
        curr = dummy_head
        while curr.next is not None:
            if curr.next.val == val:
                curr.next = curr.next.next
            else:
                curr = curr.next
        return dummy_head.next
        
=======================================================================

4. Odd Even Linked List

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def oddEvenList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        oddhead = odd = ListNode(0)
        evenhead = even = ListNode(0)
        
        while head:
            odd.next = head
            even.next = head.next
            odd = odd.next
            even = even.next
            head = head.next.next if even else None
            
        odd.next = evenhead.next
        return oddhead.next
        
==========================================================================================

5. Palindrome Linked List

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    
    def reverse(self, dummyhead):
        p0 = None
        p1 = dummyhead
        p2 = p1.next
        
        while p1:
            p1.next = p0
            p0 = p1
            p1 = p2
            if p2 is not None:
                p2 = p2.next
        dummyhead = p0
        return dummyhead
    
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if head is None:
            return True
        slow = head
        fast = head
    
        # Find mid
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        #reverse from mid
        head2 = self.reverse(slow)
            
        p1 = head
        p2 = head2
        
        # compare node by node
        while p1 and p2:
            if p1.val != p2.val:
                return False
            else:
                p1 = p1.next
                p2 = p2.next
        return True
=====================================================================================

6. Merge Two Sorted Linked List

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        if not l2:
            return l1
        x = head = ListNode(None)
        p1 = l1
        p2 = l2
        while p1 and p2:
            if p1.val < p2.val:
                nxt = p1.next
                p1.next = None
                # newNode = p1 #ListNode(p1.val)
                x.next = p1
                x = x.next
                p1 = nxt
            elif p1.val > p2.val:
                nxt = p2.next
                # newNode = ListNode(p2.val)
                x.next = p2
                x = x.next
                p2 = nxt
            elif p1.val == p2.val:
                nxt1 = p1.next
                nxt2 = p2.next
                # newNode1 = ListNode(p1.val)
                # newNode2 = ListNode(p2.val)
                x.next = p1
                p1.next = p2
                x = p2
                p1 = nxt1
                p2 = nxt2
        if p1 is not None:
            x.next = p1
        if p2 is not None:
            x.next = p2
        return head.next
====================================================================================================
7. Add Two Numbers
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def __init__(self):
        self.head = ListNode(None)
        self.x = self.head
    
    def addition(self, val1, val2, c):
        addtn = val1 + val2 + c
        if addtn >= 10:
            num = addtn - 10
            c = 1
        else:
            num = addtn 
            c = 0
        return num, c
    
    def addNode(self, val):
        newNode = ListNode(val)
        self.x.next = newNode
        self.x = self.x.next
        
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        p1,p2 = l1, l2
        carry = 0
        while p1 and p2:
            num, carry = self.addition(p1.val, p2.val, carry)
            p1 = p1.next
            p2 = p2.next
            self.addNode(num)
        if p2 is not None:
            while p2:
                num, carry = self.addition(0, p2.val, carry)
                p2 = p2.next
                self.addNode(num)
        if p1 is not None:
            while p1:
                num, carry = self.addition(p1.val, 0, carry)
                p1 = p1.next
                self.addNode(num)
        if carry == 1:
            self.addNode(1)
            carry = 0
        return self.head.next
        
==================================================================================================================
8. Rotate List

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if head is None or head.next is None or k == 0:
            return head
        x = head
        length = 0
        while x is not None:
            x = x.next
            length += 1
        k = k % length  
        while k > 0:
            p1 = head
            p2 = p1.next
            while p2.next is not None:
                p1 = p1.next
                p2 = p2.next
            p1.next = None
            p2.next = head
            head = p2
            k -= 1
        return head

